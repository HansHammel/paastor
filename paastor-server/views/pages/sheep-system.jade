extends ../layout

block append vars
    - title = "Sheep service for Node.js management";

block content
    .container
        h1 Your server, a "Sheep"

        p Sheep is a service which Paastor installs on your server.
        p It keeps your apps running, lets you deploy apps, and securely provides a way to get
            |  information about your system, like CPU usage, memory, and log files.
    
        h3#system Installed files
        
        h5.monospace /root/sheep/
        p The API and proxy.

        h5.monospace /root/system.json
        p A few bits of information about this system, like the hashed and salted API key.

        h5.monospace /root/sheep_apps/
        p Your applications live in this folder.

        h5.monospace /root/sheep.log, /root/sheep-out.log, /root/sheep-err.log
        p The proxy and API logs.

        h5.monospace /root/sheep_logs/
        p Application logs live in this folder.

        h5.monospace /root/sheep_apps/apps.json
        p This is the primary file Sheep uses to keep track of your apps. It is highly recommended that
            |  you do not edit this file, rather use the CLI and Paastor web UI to perform management tasks
            |  as intended.
        p It is recommended that you backup this file in production. 
            | Some app configuration info may be recovered after a system failure by 
            | simply re-adding them and rebooting the server. However losing data is quite possible.
            | Especially things like SSL certificates and environment variables.
        
        h3 Other changes made to the server
        p 
            strong nvm, 
            |  Node.js and npm are installed.
        p A cron task is setup to start start when your server boots.
        p Forever.js (-g) is used to keep your Sheep running.
        p Forever-monitor is used from Sheep to keep individual apps running.
        p Web servers like Apache and nginx are uninstalled.
        p When installing MongoDB or Redis, the appropriate ports are opened (if you select those options).
        br

        br
        
        h3#multiple-node-versions Using multiple versions of Node.js
        p Paastor supports having multiple versions of Node.js running on the same server.
        p For example, you can have one app running under 0.8.3 and another app running under 0.10.31.
        p By default, a 0.10.x version of Node installed during the provisioning process.
        p During 
            code pstr push
            |  there is a check that your 
            code engines.node
            |  version is already on the server. You will receive an error if it is not yet installed.

        p Install a new version from the CLI:
        pre: code $   pstr install-node 0.10.24

        br
        

        h2 Your apps running on a Sheep
        p You can run multiple apps on a Sheep server.
        p Here is basic information about your apps.

        h3#engines-node
            span.monospace engines.node
            |  formatting
        p Every app must have a 
            strong single version 
            | specified in the 
            code engines.node
            |  field in the 
            code package.json
            |  file.
        
        h5 Correct
        pre: code {
            |     "engines": { "node": "0.10.31" }
            | }

        h5 Incorrect
        pre: code {
            |     "engines": { "node": "&gt;=0.10.31" }
            | }

        p In the future, we hope to add more verbose version checking, to fully support the 
            code package.json
            |  spec.

        
        h3#env Environment variables

        h5.monospace PAASTOR_PORT
        p The environment variable&nbsp;
            code PAASTOR_PORT
            | &nbsp;is the port your application should listen on. It is assigned automatically by Sheep 
            | when you create an app. This is done to avoid port collisions.
        p The Sheep proxy will divert all HTTP and web socket requests on ports 80 and 443 (if SSL is setup), for 
            | the 
            code domains
            | &nbsp;you specify, to&nbsp;
            code http://127.0.0.1:&lt;PAASTOR_PORT&gt;
            | .

        h5.monospace NODE_ENV
        p By default the NODE_ENV is 
            code "production"
            |  but this can be overriden by a custom environment variable.

        h5 Custom
        p You can set environment variables at the application level from the UI or the CLI.

        p To see environment variable changes reflected, 
            strong restart the application
            | .
        p From the CLI, you will be prompted for the environment variable name and value.
        pre: code $  paastor setenv [server] [app]
        pre: code Environment variable name: &lt;app env key&gt;\n
            | Environment variable value: &lt;new env value&gt;\n

        br
    
        h2#troubleshooting Troubleshooting a dead Sheep or dead apps
        p Sometimes bad things happen and your app ...or a bug in Sheep... may cause the whole thing to die. If 
            | that happens (sorry!) there are some steps you can take to fix stuff. 
        
        h5 Check forever
        p Sheep should be kept alive by 
            a(href="https://github.com/nodejitsu/forever") forever
            | . SSH into your server as root and run 
            a(href="https://github.com/nodejitsu/forever") forever CLI commands.
        pre: code $   ssh -l root 3.3.3.3
            |  
            | root@3.3.3.3's password: *********
            | Welcome to Ubuntu 14.04 LTS . . .
            | 
            | $   forever list
            |   [ sheep should be listed here ]
            | 
            | $   forever logs 0
            |   [ logs will be printed if sheep is running under forever ]
        
        h5 Check the app log files
        p Normally the 
            code pstr
            |  CLI provides logs through the following commands:
        pre: code $   pstr logs [server]
            | $   pstr logs [server] [app]

        p If Sheep dies, you won't be able to get logs from 
            code pstr
            | .
        p SSH into the server as root and check 
            code /root/sheep_logs/
            | .

        h5 Reboot
        p Rebooting the server is often the fastest way to fix things.
        p On reboot, 
            strong Sheep will restart any apps
            |  that were running when it died.

        h5 Contact support
        p If you have tried everything, contact hello@paastor.com for assistance.

        br
